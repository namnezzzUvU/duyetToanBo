/*M·ªôt ng∆∞·ªùi du l·ªãch mu·ªën ƒëi
tham quan ùëÅ th√†nh ph·ªë ùëá1
, ùëá2, . . . , ùëáùëÅ. Xu·∫•t ph√°t t·∫°i m·ªôt
th√†nh ph·ªë n√†o ƒë√≥, ng∆∞·ªùi du l·ªãch mu·ªën qua t·∫•t c·∫£ c√°c
th√†nh ph·ªë c√≤n l·∫°i m·ªói th√†nh ph·ªë ƒë√∫ng m·ªôt l·∫ßn r·ªìi tr·ªü l·∫°i
th√†nh ph·ªë ban ƒë·∫ßu. Bi·∫øt ùëêùëñùëó l√† chi ph√≠ ƒëi l·∫°i t·ª´ th√†nh ph·ªë
ùëáùëñ ƒë·∫øn th√†nh ph·ªë ùëáùëó
. H√£y t√¨m m·ªôt h√†nh tr√¨nh cho ng∆∞·ªùi
ƒëi du l·ªãch c√≥ t·ªïng chi ph√≠ l√† nh·ªè nh·∫•t.*/
/*
coi ng∆∞·ªùi ƒë√≥ xu·∫•t ph√°t ·ªü th√†nh ph·ªë 1, sau ƒë√≥ duy·ªát to√†n b·ªô ho√°n v·ªã t·ª´ 2->n
v√¨ 1 2 3 4 5 6 b·∫±ng 6 5 4 3 2 1 n√™n ch·ªâ x√©t 1 c√°i.
nh·∫≠p v√†o ma tr·∫≠n n*n l√† Cij ma tr√¢n chi ph√≠ t·ª´ i->j
t√¨m optimize option */
#include<bits/stdc++.h>
int N;//N th√†nh ph·ªë
int C[100][100];//ma tr·∫≠n gi√° tr·ªã
int arr[100];//c√°c tr∆∞·ªùng h·ª£p
int arropt[100];//tr∆∞·ªùng h·ª£p t·ªëi ∆∞u
int valueOptimize;//gi√° tr·ªã c·ªßa tr∆∞·ªùng h·ª£p t·ªëi ∆∞u
bool unused[100];//ki·ªÉm tra ph·∫ßn t·ª≠ t·ª´ng c·∫•u h√¨nh
//----------------------------------------------------
void init() {//khoi tao
    std::cin>>N;
    arropt[1]=1;
    arr[1]=1;
    valueOptimize=INT_MAX;
    for(int i=1;i<=N;++i) {
        for(int j=1;j<=N;++j) {
            std::cin>>C[i][j];
        }
    }
    for(int i=2;i<=N;++i) {
        unused[i]=true;
    }
}
void display() {//in ra kq cuoi
    for(int i=1;i<=N;++i) {
        std::cout<<arropt[i];
    }
        std::cout<<std::endl<<valueOptimize+C[arropt[N]][arropt[1]];
}
void update(int tempOptimize) {//cap nhat phuong an toi uu
    valueOptimize=tempOptimize;
    for(int i=2;i<=N;++i) {
    arropt[i]=arr[i];
    }
}
int totalCost(int sum) {//tinh tong thiet hai
    for(int i=1;i<N;++i) {
        sum+=C[arr[i]][arr[i+1]];
    }
    return sum;
}
void Try(int i) {//in tung cau hinh
    for(int j=2;j<=N;++j) { 
        if(unused[j]) {
            arr[i]=j;
            unused[j]=false;
            if(i==N) {
                int sum=0;
                sum=totalCost(sum);
                if(sum<valueOptimize) {
                    update(sum);
                }
            }
            else{
                Try(i+1);
            }
            unused[j]=true;
        }
    }
}
int main() {
    init();
    Try(2);
    display();
}